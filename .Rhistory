if (type == "8h") {
bpl = c(0, 0.055, 0.071, 0.086, 0.106)
bph = c(bpl[-1] - 0.001, 0.2)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of OZONE is ppm!")
}
}
if (type == "1h") {
bpl = c(0, 0, 0.125, 0.165, 0.205, 0.405, 0.505)
bph = c(bpl[-1] - 0.001, 0.604)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of OZONE is ppm!")
}
}
}
if (pollutant == "pm25") {
bpl = c(0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5)
bph = c(bpl[-1] - 0.1, 500.4)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of PM2.5 is microgram per cubic metres!")
}
}
if (pollutant == "pm10") {
bpl = c(0, 55, 155, 255, 355, 425, 505)
bph = c(bpl[-1] - 1, 604)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of PM10 is microgram per cubic metres!")
}
}
if (pollutant == "co") {
bpl = c(0, 4.5, 9.5, 12.5, 15.5, 30.5, 40.5)
bph = c(bpl[-1] - 0.1, 50.4)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of CO is ppm!")
}
}
if (pollutant == "so2") {
bpl = c(0, 36, 76, 186, 305, 605, 805)
bph = c(bpl[-1] - 1, 1004)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of SO2 is ppb!")
}
}
if (pollutant == "no2") {
bpl = c(0, 54, 101, 361, 650, 1250, 1650)
bph = c(bpl[-1] - 1, 2049)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of SO2 is ppb!")
}
}
rank = which(con <= bph)[1]
aqi = ceiling((ih[rank] - il[rank])/(bph[rank] - bpl[rank]) *
(con - bpl[rank]) + il[rank])
names(aqi) = "aqi"
return(aqi)
}
if (length(con) > 1) {
rst = NULL
for (i in 1:length(con)) {
rst = c(rst, con2aqi_single(s_pollutant = pollutant,
s_con = con[i], s_type = type))
}
return(rst)
}
if (length(con) == 1) {
rst = con2aqi_single(s_pollutant = pollutant, s_con = con,
s_type = type)
names(rst) = "aqi"
return(rst)
}
}
con2aqi <- function (pollutant, con, type = NULL, na.rm = FALSE) {
if (!any(pollutant %in% c("o3", "pm25", "pm10", "co", "so2",
"no2"))) {
stop("Please input the available pollutant!")
}
con2aqi_single = function(s_pollutant, s_con, s_type, na.rm = na.rm) {
pollutant = s_pollutant
con = s_con
type = s_type
il = c(0, 51, 101, 151, 201, 301, 401)
ih = c(50, 100, 150, 200, 300, 400, 500)
if(na.rm == 0 & is.na(s_con)){
stop("NA value received, but na.rm = FALSE.")
} else if (na.rm == 1 & is.na(s_con)) {
return(NA)
} else {
if (pollutant == "o3") {
if (type == "8h") {
bpl = c(0, 0.055, 0.071, 0.086, 0.106)
bph = c(bpl[-1] - 0.001, 0.2)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of OZONE is ppm!")
}
}
if (type == "1h") {
bpl = c(0, 0, 0.125, 0.165, 0.205, 0.405, 0.505)
bph = c(bpl[-1] - 0.001, 0.604)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of OZONE is ppm!")
}
}
}
if (pollutant == "pm25") {
bpl = c(0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5)
bph = c(bpl[-1] - 0.1, 500.4)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of PM2.5 is microgram per cubic metres!")
}
}
if (pollutant == "pm10") {
bpl = c(0, 55, 155, 255, 355, 425, 505)
bph = c(bpl[-1] - 1, 604)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of PM10 is microgram per cubic metres!")
}
}
if (pollutant == "co") {
bpl = c(0, 4.5, 9.5, 12.5, 15.5, 30.5, 40.5)
bph = c(bpl[-1] - 0.1, 50.4)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of CO is ppm!")
}
}
if (pollutant == "so2") {
bpl = c(0, 36, 76, 186, 305, 605, 805)
bph = c(bpl[-1] - 1, 1004)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of SO2 is ppb!")
}
}
if (pollutant == "no2") {
bpl = c(0, 54, 101, 361, 650, 1250, 1650)
bph = c(bpl[-1] - 1, 2049)
if (con > tail(bph, 1)) {
stop("Please confirm that the unit of SO2 is ppb!")
}
}
rank = which(con <= bph)[1]
aqi = ceiling((ih[rank] - il[rank])/(bph[rank] - bpl[rank]) *
(con - bpl[rank]) + il[rank])
names(aqi) = "aqi"
return(aqi)
}
if (length(con) > 1) {
rst = NULL
for (i in 1:length(con)) {
rst = c(rst, con2aqi_single(s_pollutant = pollutant,
s_con = con[i], s_type = type, na.rm = na.rm))
}
return(rst)
}
if (length(con) == 1) {
rst = con2aqi_single(s_pollutant = pollutant, s_con = con,
s_type = type, na.rm = na.rm)
names(rst) = "aqi"
return(rst)
}
}
pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate_if("Air Quality Index" = con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`)) %>%
View()
pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate_if("Air Quality Index" = con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`)) %>%
View()
pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate_if("Air Quality Index" = con2aqi::con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`)) %>%
View()
pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate("Air Quality Index" = con2aqi::con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`)) %>%
View()
pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate("Air Quality Index" = con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`)) %>%
View()
con2aqi::con2aqi(pollutant = "pm25", con = 49.17683)
con2aqi::con2aqi(pollutant = "pm25", con = 0.676833333)
source('~/.active-rstudio-document', echo=TRUE)
df <- pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`))
source("R/revised_con2aqi.R")
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/revised_con2aqi.R', echo=TRUE)
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/revised_con2aqi.R', echo=TRUE)
df <- pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`))
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/revised_con2aqi.R', echo=TRUE)
df <- pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`))
df <- pm25_list[[1]] %>% left_join(temp_list[[1]], by = "datetime") %>%
left_join(humid_list[[1]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
View(df)
View(humid_list)
sensors <- names(pm25_list)
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
print(filename)
make_datadelivery_wkbk <- function(site, pat_list, sensor_catalog) {
# Outputs an excel workbook.
# TODO: Error control system.
pats <- get_site_pats(sensor_catalog = sensor_catalog, pat_list = pat_list, site = site)
# Filtering out not pat objects.
pats <- pats[map_lgl(pats, pat_isPat)]
# Creating workbook obects.
wb <- openxlsx::createWorkbook(creator = "Earthwatch Institute US")
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
meta_list <- purrr::map(pats, AirSensor::pat_extractMeta)
meta_df <- dplyr::bind_rows(meta_list) %>%
dpltr::select(label) %>%
dplyr::left_join(sensor_catalog, by = c("label" = "Sensor Label")) %>%
dplyr::select(-c("MAC ID", "Sensor ID", "...13", "Person of Contact", "Purchasing Email",
"Program", "Picture of Sensor"))
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
openxlsx::writeData(wb = wb, sheet = "Sensor Info", x = meta_df)
# Creates list of Air Sensor Objects with pm25 hourly averages.
pm25_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "pm25", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Particulate Matter 2.5 (Hourly Average)" = 2)
# Creates list of Air Sensor Objects with Temperature hourly averages.
temp_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "temperature", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Temperature (C)" = 2)
# Creates list of Air Sensor Objects with Humidity Hourly Averages
humid_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "humidity", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Humidity (Pct)" = 2)
sensors <- names(pm25_list)
for (i in 1:length(sensors)){
sensors[[i]]
df <- pm25_list[[sensor] %>% left_join(temp_list[[sensor]], by = "datetime") %>%
left_join(humid_list[[sensor]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
openxlsx::addWorksheet(wb, sheetName = sensor)
openxlsx::writeData(wb = wb, sheet = sensor, x = df)
}
openxlsx::saveWorkbook(wb, file = filename)
}
make_datadelivery_wkbk <- function(site, pat_list, sensor_catalog) {
# Outputs an excel workbook.
# TODO: Error control system.
pats <- get_site_pats(sensor_catalog = sensor_catalog, pat_list = pat_list, site = site)
# Filtering out not pat objects.
pats <- pats[map_lgl(pats, pat_isPat)]
# Creating workbook obects.
wb <- openxlsx::createWorkbook(creator = "Earthwatch Institute US")
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
meta_list <- purrr::map(pats, AirSensor::pat_extractMeta)
meta_df <- dplyr::bind_rows(meta_list) %>%
dpltr::select(label) %>%
dplyr::left_join(sensor_catalog, by = c("label" = "Sensor Label")) %>%
dplyr::select(-c("MAC ID", "Sensor ID", "...13", "Person of Contact", "Purchasing Email",
"Program", "Picture of Sensor"))
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
openxlsx::writeData(wb = wb, sheet = "Sensor Info", x = meta_df)
# Creates list of Air Sensor Objects with pm25 hourly averages.
pm25_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "pm25", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Particulate Matter 2.5 (Hourly Average)" = 2)
# Creates list of Air Sensor Objects with Temperature hourly averages.
temp_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "temperature", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Temperature (C)" = 2)
# Creates list of Air Sensor Objects with Humidity Hourly Averages
humid_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "humidity", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Humidity (Pct)" = 2)
sensors <- names(pm25_list)
for (i in 1:length(sensors)){
sensor <- sensors[[i]]
df <- pm25_list[[sensor] %>% left_join(temp_list[[sensor]], by = "datetime") %>%
left_join(humid_list[[sensor]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
openxlsx::addWorksheet(wb, sheetName = sensor)
openxlsx::writeData(wb = wb, sheet = sensor, x = df)
}
openxlsx::saveWorkbook(wb, file = filename)
}
make_datadelivery_wkbk <- function(site, pat_list, sensor_catalog) {
# Outputs an excel workbook.
# TODO: Error control system.
pats <- get_site_pats(sensor_catalog = sensor_catalog, pat_list = pat_list, site = site)
# Filtering out not pat objects.
pats <- pats[map_lgl(pats, pat_isPat)]
# Creating workbook obects.
wb <- openxlsx::createWorkbook(creator = "Earthwatch Institute US")
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
meta_list <- purrr::map(pats, AirSensor::pat_extractMeta)
meta_df <- dplyr::bind_rows(meta_list) %>%
dpltr::select(label) %>%
dplyr::left_join(sensor_catalog, by = c("label" = "Sensor Label")) %>%
dplyr::select(-c("MAC ID", "Sensor ID", "...13", "Person of Contact", "Purchasing Email",
"Program", "Picture of Sensor"))
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
openxlsx::writeData(wb = wb, sheet = "Sensor Info", x = meta_df)
# Creates list of Air Sensor Objects with pm25 hourly averages.
pm25_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "pm25", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Particulate Matter 2.5 (Hourly Average)" = 2)
# Creates list of Air Sensor Objects with Temperature hourly averages.
temp_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "temperature", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Temperature (C)" = 2)
# Creates list of Air Sensor Objects with Humidity Hourly Averages
humid_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "humidity", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Humidity (Pct)" = 2)
sensors <- names(pm25_list)
for (i in 1:length(sensors)){
sensor <- sensors[[i]]
df <- pm25_list[[sensor]] %>% left_join(temp_list[[sensor]], by = "datetime") %>%
left_join(humid_list[[sensor]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
openxlsx::addWorksheet(wb, sheetName = sensor)
openxlsx::writeData(wb = wb, sheet = sensor, x = df)
}
openxlsx::saveWorkbook(wb, file = filename)
}
site = "Waldorf School, Belmont MA"
sensor_labels <- sensor_catalog[1:4, "Sensor Label"]
sensor_ids <- sensor_catalog[1:4, "Sensor ID"]
pat_list <- fetch_pat_list(pas = pas, sensor_labels = sensor_labels, sensor_ids = sensor_ids)
OlsonNames()
pat_list <- fetch_pat_list(pas = pas, sensor_labels = sensor_labels, sensor_ids = sensor_ids,
start = start, end = end, timezone = "America/New_York")
make_datadelivery_wkbk(site = site, pat_list = pat_list, sensor_catalog = sensor_catalog)
make_datadelivery_wkbk <- function(site, pat_list, sensor_catalog) {
# Outputs an excel workbook.
# TODO: Error control system.
pats <- get_site_pats(sensor_catalog = sensor_catalog, pat_list = pat_list, site = site)
# Filtering out not pat objects.
pats <- pats[map_lgl(pats, pat_isPat)]
# Creating workbook obects.
wb <- openxlsx::createWorkbook(creator = "Earthwatch Institute US")
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
meta_list <- purrr::map(pats, AirSensor::pat_extractMeta)
meta_df <- dplyr::bind_rows(meta_list) %>%
dplyr::select(label) %>%
dplyr::left_join(sensor_catalog, by = c("label" = "Sensor Label")) %>%
dplyr::select(-c("MAC ID", "Sensor ID", "...13", "Person of Contact", "Purchasing Email",
"Program", "Picture of Sensor"))
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
openxlsx::writeData(wb = wb, sheet = "Sensor Info", x = meta_df)
# Creates list of Air Sensor Objects with pm25 hourly averages.
pm25_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "pm25", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Particulate Matter 2.5 (Hourly Average)" = 2)
# Creates list of Air Sensor Objects with Temperature hourly averages.
temp_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "temperature", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Temperature (C)" = 2)
# Creates list of Air Sensor Objects with Humidity Hourly Averages
humid_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "humidity", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Humidity (Pct)" = 2)
sensors <- names(pm25_list)
for (i in 1:length(sensors)){
sensor <- sensors[[i]]
df <- pm25_list[[sensor]] %>% left_join(temp_list[[sensor]], by = "datetime") %>%
left_join(humid_list[[sensor]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
openxlsx::addWorksheet(wb, sheetName = sensor)
openxlsx::writeData(wb = wb, sheet = sensor, x = df)
}
openxlsx::saveWorkbook(wb, file = filename)
}
make_datadelivery_wkbk(site = site, pat_list = pat_list, sensor_catalog = sensor_catalog)
make_datadelivery_wkbk <- function(site, pat_list, sensor_catalog) {
# Outputs an excel workbook.
# TODO: Error control system.
pats <- get_site_pats(sensor_catalog = sensor_catalog, pat_list = pat_list, site = site)
# Filtering out not pat objects.
pats <- pats[map_lgl(pats, pat_isPat)]
# Creating workbook obects.
wb <- openxlsx::createWorkbook(creator = "Earthwatch Institute US")
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
meta_list <- purrr::map(pats, AirSensor::pat_extractMeta)
meta_df <- dplyr::bind_rows(meta_list) %>%
dplyr::select(label) %>%
dplyr::left_join(sensor_catalog, by = c("label" = "Sensor Label")) %>%
dplyr::select(-c("MAC ID", "Sensor ID", "...13", "Person of Contact", "Purchasing Email",
"Program", "Picture of Sensor"))
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
openxlsx::writeData(wb = wb, sheet = "Sensor Info", x = meta_df)
# Creates list of Air Sensor Objects with pm25 hourly averages.
pm25_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "pm25", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Particulate Matter 2.5 (Hourly Average)" = 2)
# Creates list of Air Sensor Objects with Temperature hourly averages.
temp_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "temperature", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Temperature (C)" = 2)
# Creates list of Air Sensor Objects with Humidity Hourly Averages
humid_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "humidity", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Humidity (Pct)" = 2)
sensors <- names(pm25_list)
for (i in 1:length(sensors)){
sensor <- sensors[[i]]
df <- pm25_list[[sensor]] %>% left_join(temp_list[[sensor]], by = "datetime") %>%
left_join(humid_list[[sensor]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
openxlsx::addWorksheet(wb, sheetName = sensor)
openxlsx::writeData(wb = wb, sheet = sensor, x = df)
}
openxlsx::saveWorkbook(wb, file = filename)
}
make_datadelivery_wkbk <- function(site, pat_list, sensor_catalog) {
# Outputs an excel workbook.
# TODO: Error control system.
pats <- get_site_pats(sensor_catalog = sensor_catalog, pat_list = pat_list, site = site)
# Filtering out not pat objects.
pats <- pats[map_lgl(pats, pat_isPat)]
# Creating workbook obects.
wb <- openxlsx::createWorkbook(creator = "Earthwatch Institute US")
filename <- paste("outputs/datasets/data-deliveries/", site, "-", lubridate::today(), ".xlsx", sep = "")
meta_list <- purrr::map(pats, AirSensor::pat_extractMeta)
meta_df <- dplyr::bind_rows(meta_list) %>%
dplyr::select(label) %>%
dplyr::left_join(sensor_catalog, by = c("label" = "Sensor Label")) %>%
dplyr::select(-c("MAC ID", "Sensor ID", "...13", "Person of Contact", "Purchasing Email",
"Program", "Picture of Sensor"))
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
openxlsx::writeData(wb = wb, sheet = "Sensor Info", x = meta_df)
# Creates list of Air Sensor Objects with pm25 hourly averages.
pm25_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "pm25", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Particulate Matter 2.5 (Hourly Average)" = 2)
# Creates list of Air Sensor Objects with Temperature hourly averages.
temp_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "temperature", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Temperature (C)" = 2)
# Creates list of Air Sensor Objects with Humidity Hourly Averages
humid_list <- purrr::map(pats, AirSensor::pat_createAirSensor,
parameter = "humidity", qc_algorithm = "hourly_AB_00") %>%
purrr::map(AirSensor::sensor_extractData) %>%
purrr::map(dplyr::rename, "Humidity (Pct)" = 2)
sensors <- names(pm25_list)
for (i in 1:length(sensors)){
sensor <- sensors[[i]]
df <- pm25_list[[sensor]] %>% left_join(temp_list[[sensor]], by = "datetime") %>%
left_join(humid_list[[sensor]], by = "datetime") %>%
mutate("Air Quality Index" = revised_con2aqi(pollutant = "pm25",
con = `Particulate Matter 2.5 (Hourly Average)`,
na.rm = TRUE))
openxlsx::addWorksheet(wb, sheetName = sensor)
openxlsx::writeData(wb = wb, sheet = sensor, x = df)
}
openxlsx::saveWorkbook(wb, file = filename)
}
make_datadelivery_wkbk(site = site, pat_list = pat_list, sensor_catalog = sensor_catalog)
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/util.R', echo=TRUE)
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/util.R', echo=TRUE)
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/scripts/make_datadelivery_wkbk.R', echo=TRUE)
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/scripts/make_datadelivery_wkbk.R', echo=TRUE)
View(pcd)
View(pas)
View(sensor_catalog)
View(pat_list)
pat_list <- fetch_pat_list(pas = pas, sensor_labels = sensor_labels, sensor_ids = sensor_ids,
start = start, end = end, timezone = "America/New_York")
start = 20200101
end = 20200110
pat_list <- fetch_pat_list(pas = pas, sensor_labels = sensor_labels, sensor_ids = sensor_ids,
start = start, end = end, timezone = "America/New_York")
pat_list <- fetch_pat_list(pas = pas, sensor_labels = sensor_labels, sensor_ids = sensor_ids,
start = start, end = end, timezone = "America/New_York")
pat_list <- fetch_pat_list(pas = pas, sensor_labels = sensor_labels, sensor_ids = sensor_ids,
start = start, end = end, timezone = "America/New_York")
source('C:/Users/iozeroff/OneDrive - Earthwatch/Desktop/Data-Science/oha-ups/R/util.R', echo=TRUE)
